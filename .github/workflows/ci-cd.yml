name: Resume Service CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: "resumeserviceacr"
  CONTAINER_NAME: "resume-service"
  RESOURCE_GROUP: "resume-service-rg"
  CLUSTER_NAME: "resume-service-aks"

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Maven tests
      working-directory: ./service
      run: mvn clean test
      
    - name: Build JAR file
      working-directory: ./service
      run: mvn clean package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact
        path: service/target/*.jar

  build-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./service
        file: ./service/DockerFile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  validate-terraform:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Terraform Format Check
      working-directory: ./infra/Terraform
      run: terraform fmt -check
      
    - name: Terraform Init
      working-directory: ./infra/Terraform
      run: terraform init -backend=false
      
    - name: Terraform Validate
      working-directory: ./infra/Terraform
      run: terraform validate
      
    - name: Upload Terraform artifacts
      uses: actions/upload-artifact@v3
      with:
        name: terraform-files
        path: |
          infra/Terraform/*.tf
          infra/Terraform/*.tfvars.example

  validate-kubernetes:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        
    - name: Validate Kubernetes manifests
      run: |
        # Validate dev environment
        kubectl apply --dry-run=client -k k8s/dev
        
        # Validate prod environment  
        kubectl apply --dry-run=client -k k8s/prod
        
    - name: Build Kustomize manifests
      run: |
        # Build dev manifests
        kustomize build k8s/dev > dev-manifests.yaml
        
        # Build prod manifests
        kustomize build k8s/prod > prod-manifests.yaml
        
    - name: Upload Kubernetes artifacts
      uses: actions/upload-artifact@v3
      with:
        name: k8s-manifests
        path: |
          k8s/
          *-manifests.yaml
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  publish-artifacts:
    name: Publish Build Artifacts
    runs-on: ubuntu-latest
    needs: [build-docker-image, validate-terraform, validate-kubernetes, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        
        # Copy Terraform files
        cp -r infra/Terraform deployment-package/
        
        # Copy Kubernetes manifests
        cp -r k8s deployment-package/
        
        # Copy deployment scripts
        cp deploy.ps1 deployment-package/
        cp DEPLOYMENT-GUIDE.md deployment-package/
        
        # Create deployment info
        echo "Build Information:" > deployment-package/BUILD-INFO.txt
        echo "Branch: ${{ github.ref_name }}" >> deployment-package/BUILD-INFO.txt
        echo "Commit: ${{ github.sha }}" >> deployment-package/BUILD-INFO.txt
        echo "Build Date: $(date)" >> deployment-package/BUILD-INFO.txt
        echo "Docker Image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> deployment-package/BUILD-INFO.txt
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package-${{ github.ref_name }}-${{ github.sha }}
        path: deployment-package/
        retention-days: 30
